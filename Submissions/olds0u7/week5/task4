First we will make binary executable by command
$ chmod +x rev4-rrackme0x03
Now we will find any string in binary using strings command
$ strings rev4-rrackme0x03
Now the assembly language code of this binary is
$ objdump -d rev4-rrackme0x03
Assembly dump of main function- 
08048498 <main>:
 80484da:	e8 51 fe ff ff       	call   8048330 <scanf@plt>
 80484df:	c7 45 f8 5a 00 00 00 	movl   $0x5a,-0x8(%ebp)
 80484e6:	c7 45 f4 ec 01 00 00 	movl   $0x1ec,-0xc(%ebp)
 80484ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
 80484f0:	8d 45 f8             	lea    -0x8(%ebp),%eax
 80484f3:	01 10                	add    %edx,(%eax)
 80484f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
 80484f8:	0f af 45 f8          	imul   -0x8(%ebp),%eax
 80484fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80484ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
 8048502:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048506:	8b 45 fc             	mov    -0x4(%ebp),%eax
 8048509:	89 04 24             	mov    %eax,(%esp)
 804850c:	e8 5d ff ff ff       	call   804846e <test>

From previous binary we know that value of register $eax at line 19 is hex(0x52b24) and it is copied to 0x4($esp).From line 20 out input is being sent to $eax and then by mov command we send the value of $eax to $esp(the stack pointer)
now test function is called at line 22.
Assembler dump of test function-
0804846e <test>:
 804846e:	55                   	push   %ebp
 804846f:	89 e5                	mov    %esp,%ebp
 8048471:	83 ec 08             	sub    $0x8,%esp
 8048474:	8b 45 08             	mov    0x8(%ebp),%eax
 8048477:	3b 45 0c             	cmp    0xc(%ebp),%eax
 804847a:	74 0e                	je     804848a <test+0x1c>
 804847c:	c7 04 24 ec 85 04 08 	movl   $0x80485ec,(%esp)
 8048483:	e8 8c ff ff ff       	call   8048414 <shift>
 8048488:	eb 0c                	jmp    8048496 <test+0x28>
 804848a:	c7 04 24 fe 85 04 08 	movl   $0x80485fe,(%esp)
 8048491:	e8 7e ff ff ff       	call   8048414 <shift>
 8048496:	c9                   	leave  
 8048497:	c3                   	ret    

First the base pointer($ebp) is pushed to stack then regular instructions are done at line 32 we see one comparison between 0xc($ebp) 
and $eax .
Now we fire up the gdb in terminal with this binary and set a breakpoint at 0x8048477 and when we hit the breakpoint we output the value 
$eax register y using command
$ x/s $eax
and we see output what we have given the input so input is compared to oxc($ebp) by using same way we output the content of 0xc($ebp) 
and we find value hex(0x52b24) and when we give the input hex(0x52b24) in integer we movw to shift function which is nothing but prints
the string "Invalid password!" and "Password !! OK:)"
so the correct password is "338724".

